import requests
from bs4 import BeautifulSoup

# Gather forms and other information from the target URL
def gather_info(url):
    try:
        # Perform an HTTP GET request to fetch the page content
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')

        # Find all forms on the page
        forms = soup.find_all('form')
        print(f"Found {len(forms)} forms on {url}")

        # Print details of each form (method, action, inputs)
        for i, form in enumerate(forms):
            print(f"\nForm #{i + 1}:")
            print(f"Method: {form.get('method')}")
            print(f"Action: {form.get('action')}")
            inputs = form.find_all('input')
            for input_tag in inputs:
                print(f"Input Name: {input_tag.get('name')} - Type: {input_tag.get('type')}")
        
        return forms

    except requests.exceptions.RequestException as e:
        print(f"Error connecting to {url}: {e}")
        return None


# SQL Injection Payloads to test
sql_payloads = ["' OR 1=1--", "' AND 1=1--", "' OR 'a'='a"]

# Function to test SQL injection vulnerabilities
def test_sqli(url):
    for payload in sql_payloads:
        try:
            vulnerable_url = f"{url}?id={payload}"  # Modify based on the input parameters in the URL
            response = requests.get(vulnerable_url)

            # Check for common SQL error messages in the response
            if any(keyword in response.text for keyword in ["SQL", "syntax", "mysql"]):
                print(f"Possible SQL Injection vulnerability at {vulnerable_url}")

        except requests.exceptions.RequestException as e:
            print(f"Error testing SQLi at {url}: {e}")


# XSS Payloads to test
xss_payloads = ['<script>alert(1)</script>', '<img src="x" onerror="alert(1)">']

# Function to test Cross-Site Scripting vulnerabilities
def test_xss(url):
    for payload in xss_payloads:
        try:
            vulnerable_url = f"{url}?input={payload}"  # Modify based on input parameters
            response = requests.get(vulnerable_url)

            # Check if the payload is reflected in the response
            if payload in response.text:
                print(f"Possible XSS vulnerability at {vulnerable_url}")

        except requests.exceptions.RequestException as e:
            print(f"Error testing XSS at {url}: {e}")


# Function to test if forms have CSRF protection
def test_csrf(forms):
    for i, form in enumerate(forms):
        csrf_token = form.find('input', {'name': 'csrf_token'})
        if csrf_token:
            print(f"Form #{i+1} contains a CSRF token.")
        else:
            print(f"Form #{i+1} is missing a CSRF token!")


# Function to check security headers
def check_headers(url):
    try:
        response = requests.get(url)
        headers = response.headers
        
        # Checking for common security headers
        if "X-Frame-Options" not in headers:
            print("Missing X-Frame-Options header")
        if "Strict-Transport-Security" not in headers:
            print("Missing Strict-Transport-Security header")
        if "X-Content-Type-Options" not in headers:
            print("Missing X-Content-Type-Options header")
        
        # Print all headers (optional)
        print("\nResponse Headers:")
        for header, value in headers.items():
            print(f"{header}: {value}")

    except requests.exceptions.RequestException as e:
        print(f"Error fetching headers from {url}: {e}")


# Main function to orchestrate the scan
def main(url):
    print(f"Starting scan for {url}...\n")

    # Step 1: Gather Information
    forms = gather_info(url)

    # Step 2: Test for SQL Injection
    print("\nTesting for SQL Injection...")
    test_sqli(url)

    # Step 3: Test for Cross-Site Scripting (XSS)
    print("\nTesting for Cross-Site Scripting (XSS)...")
    test_xss(url)

    # Step 4: Test for CSRF
    if forms:
        print("\nTesting for CSRF Protection...")
        test_csrf(forms)

    # Step 5: Check Security Headers
    print("\nChecking HTTP Security Headers...")
    check_headers(url)

    print("\nScan complete.")


if __name__ == "__main__":
    target_url = input("Enter the target URL: ")
    main(target_url)
